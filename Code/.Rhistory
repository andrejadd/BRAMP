45 * 4.8
q()
6.08 * 95
q()
q()
dnorm(1)
t = 1
dnorm(t)
dnorm(t - 0.1)
dnorm(t + 0.1)
lag = 0.1
dnorm(t + lag)
dnorm(t + lag) - dnorm(t - lag)
dnorm(t + lag) - dnorm(t - lag) / ( (t + lag) - (t - lag))
(t + lag) - (t - lag)
q()
6 * 24
q()
4 * 7
4 * 7 * 100
4 * 7 * 100 * 10
4 * 7 * 100 * 10 / 60
(4 * 7) * 100
(4 * 7) * 100 / 60
(4 * 7) * 100 / 60 * 10
(4 * 7) * 100 / 60 * 10 / 60
q()
1132.50 * 12
q()
help(polr)
help(function)
help(boxplot)
help("boxplot")
help(pi)
data.frame
help(data.fram)
help(data.frame)
q()
x = c(1:10)
c = c(x[1])
for(i in 2:length(x)) {
c[i] = c[i-1] + x[i]
}
c
fib = c(0,1)
for(i in 3:50) {
fib[i] = fib[i-2] + fib[i-1]
}
fib
A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
A
y = c(1,1,1)
A %*% y
A %*% t(y)
as.vector(A %*% y)
y
y%*%y
y = c(4,3,2)
y%*%y
sqrt(sum(y^2)
)
sqrt(y%*%y)
y = c(1,1,1)
steps = 10
A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
for(i in 2:steps) {
Ay = as.vector(A %*% y)
y = 1/(sqrt(Ay%*%Ay)) * Ay
}
y
eigen(A)
y = c(1,1,1)
steps = 10
A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
for(i in 2:steps) {
Ay = as.vector(A %*% y)
y = Ay / (sqrt(Ay%*%Ay))
}
y
eigen(A)
y = c(1,1,1)
steps = 100
A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
for(i in 2:steps) {
Ay = as.vector(A %*% y)
y = Ay / (sqrt(Ay%*%Ay))
}
y
eigen(A)
y = c(1,1,1)
steps = 100
A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
for(i in 2:steps) {
Ay = A %*% y
y = Ay / (sqrt(Ay%*%Ay))
}
y
eigen(A)
y = c(1,1,1)
steps = 100
A = cbind(c(3,2,4), c(2,0,2), c(4,2,3))
for(i in 1:steps) {
Ay = A %*% y
#  y = Ay / (sqrt(Ay%*%Ay))
y = Ay / sqrt(sum(Ay^2))
}
y
eigen(A)
n = 10
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
lines(coords[1,], coords[2,])
coords[1,]
lines(coords[1,1], coords[2,2])
lines(coords[1,1], coords[2,2], col="blue")
lines(coords[1,], coords[3,], col="blue")
lines(c(coords[1,1], coords[2,1]), c(coords[1,2], coords[2,2]), col="blue")
plot(coords)
for(i in 1:nrow(coords)) {
for(j in 1:nrow(coords)) {
lines(c(coords[i,1], coords[i,2]), c(coords[j,1], coords[j,2]))
}
}
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[i,2]), c(coords[j,1], coords[j,2]))
}
}
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
n = 100
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
n = 100
coords = matrix(rnorm(n*2), ncol=2)
plot(coords)
for(i in 1:nrow(coords)) {
for(j in i:nrow(coords)) {
lines(c(coords[i,1], coords[j,1]), c(coords[i,2], coords[j,2]))
}
}
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
t
b = rep(0, 4096)
t = c(1:2048, 2048:1)#/4096
t
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
w = 1/2
rep(t[2:length(t)], 2)
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * rep(t[2:length(t)], 2)
}
plot(x, b)
seq(2,10,2)
seq(2,10,by=2)
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b)
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/4
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 3/4
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 3/4
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
#t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
#t = c(t,t)
}
plot(x, b, type="l")
b = rep(0, 4096)
t = c(1:2048, 2048:1)/4096
x = c(1:4096) / 4096
w = 1/2
for(i in 1:10) {
b = b + t
t = w * t[seq(2,4096,by=2)]
t = c(t,t)
}
plot(x, b, type="l")
help(dbinom)
dbinom(5)
dbinom(1,5)
??dbinom
?base::dbinom
dnorm(1)
dnorm(0)
dnorm(0)
dnorm(3)
dnorm(-3)
dnorm(1:3
)
hist(dnorm(-3:3))
plot(-3:3, dnorm(-3:3))
plot(seq(-3,3,0.1), dnorm(seq(-3,3,0.1))
)
dbinom(3, 10,0.5)
dbinom(3, 10,0.6)
dbinom(3, 10,0)
dbinom(3, 10,-1)
dbinom(3, 10,0:10)
dbinom(3, 10,1)
dbinom(3, 10,2)
dbinom(3, 10,seq(0,1,0.05))
plot(seq(0,1,0.05), dbinom(3, 10,seq(0,1,0.05)))
plot(seq(0,1,0.01), dbinom(3, 10,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(3, 10,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(4, 10,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(1, 10,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(1, 8,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(3, 8,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(3, 2,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(3, 3,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(3, 4,seq(0,1,0.01)))
plot(seq(0,1,0.01), dbinom(3, 4,seq(0,1,0.01), log=T))
plot(seq(0,1,0.01), dbinom(3, 10,seq(0,1,0.01), log=T))
plot(seq(-1,1,0.01), dbinom(3, 10,seq(-1,1,0.01), log=T))
plot(seq(1,10,0.1), dbinom(seq(1,10,0.1), 10,0.5), log=T))
plot(seq(1,10,0.1), dbinom(seq(1,10,0.1), 10,0.5))
warnings()
plot(seq(1,10,1), dbinom(seq(1,10,1), 10,0.5))
plot(c(-3,3), c(-3,3), type=” n ”)
plot(c(-3,3), c(-3,3), type=”n”)
plot(c(-3,3), c(-3,3), type="n")
x = 0
y = 0
width = 4
help(rect)
??rect
?rect
n <- 30 # Sample size
theta <- 0.6 # Observed proportion
alpha <- 0.01
sd.theta <- sqrt(theta*(1-theta)/n) # Compute standard deviation of x/n
ci <- theta + c(-1,1) * qnorm(1-alpha/2) * sd.theta # Compute confidence interval
names(ci) <- c("upper","lower")
ci
n <- 50 # Sample size
theta <- 0.7 # Observed proportion
alpha <- 0.05
sd.theta <- sqrt(theta*(1-theta)/n) # Compute standard deviation of x/n
ci <- theta + c(-1,1) * qnorm(1-alpha/2) * sd.theta # Compute confidence interval
names(ci) <- c("upper","lower")
ci
qnorm(0.445)
qnorm(0.97)
qnorm(1:10)
qnorm(-1:1)
qnorm(-1)
qnorm(0)
qnorm(0.1)
qnorm(0.0001)
alpha = 0.05
1-alpha/2
pnorm(1)
pnorm(1)
pnorm(1)
pnorm(0.5)
pnorm(0.5)^(-1)
qnorm(0.69)
pnorm(0)
pnorm(0)
pnorm(0.1)
pnorm(-0.1)
qnorm(0.5)
qnorm(0.5)
qnorm(0.6)
qnorm(0.7)
qnorm(1)
qnorm(0.9)
qnorm(0.999)
qnorm(0.95)
A <- matrix(c(9,6,3,8,5,2,7,4,1),nrow=3,byrow=TRUE)  #creates matrix A
A                                                    #displays matrix A
# creating matrix B
B <- matrix(c(1,0,-1,0,2,0,0,0,3),nrow=3,byrow=TRUE) #creates matrix B
B
load(url("http://www.stats.gla.ac.uk/~levers/teaching/s3i2r/a1.RData"))
x <- potatoes[,1]                                   #creates vector x
x                                                   #displays vector x
#creating vector y containing glucose levels
y <- potatoes[,2]                                   #creates vector y
y                                                   #displays vector y
n <- c(rep(1, times=14))
n
x <- potatoes[,1]
x
X <- cbind(c(n),c(x))                         #creates the design matrix
X
# creating a X'X
XtX <- t(X)%*%(X)                            #creates XtX matrix
XtX
Xty <- t(X)%*%(y)                            #creates Xty matrix
Xty
#A Q 2(c)(beta) : 2 / 2 marks
# solving system of equations
betahat <- solve(XtX,Xty)                    #solving system of equations
betahat
solve(XtX) %*% Xty
setwd("~/Desktop/Dropbox/Labs2012/Lab_RIntro/Lab6")
source("basictests.~R")
x = c(1,2,3)
polynomial.design(x)
source("basictests.~R")
polynomial.design(x)
source("basictests.~R")
polynomial.design(x)
polynomial.design(x,2)
polynomial.design(x,4)
source("basictests.~R")
polynomial.design(x,4)
potatoes
plot(potatoes[,1], potatoes[,2])
X = polynomial.design(potatoes[,2],1)
beta = linear.regression(X, potatoes[,1])
y.pred = X%*%beta
lines(potatoes[,1], y.pred)
source("basictests.~R")
beta = linear.regression(X, potatoes[,1])
beta
X%*%beta
y.pred = X%*%beta
lines(potatoes[,1], y.pred)
View(potatoes)
X = polynomial.design(potatoes[,1],1)
beta = linear.regression(X, potatoes[,2])
y.pred = X%*%beta
lines(potatoes[,1], y.pred)
X = polynomial.design(potatoes[,1],2)
beta = linear.regression(X, potatoes[,2])
y.pred = X%*%beta
lines(potatoes[,1], y.pred)
X = polynomial.design(potatoes[,1],3)
beta = linear.regression(X, potatoes[,2])
y.pred = X%*%beta
lines(potatoes[,1], y.pred)
X = polynomial.design(potatoes[,1],5)
beta = linear.regression(X, potatoes[,2])
y.pred = X%*%beta
lines(potatoes[,1], y.pred)
plot(potatoes[,1], potatoes[,2], xlab="Weeks", ylab="Glucose")
X = polynomial.design(potatoes[,1],5)
beta = linear.regression(X, potatoes[,2])
y.pred = X%*%beta
lines(potatoes[,1], y.pred)
more.x = seq(0,20,0.1)
more.X = matrix(c(1:length(more.x), more.x), ncol=2)
y.pred = more.X%*%beta
lines(potatoes[,1], y.pred)
more.x = seq(0,20,0.1)
more.X = matrix(c(1:length(more.x), more.x), ncol=2)
y.pred = more.X%*%beta
lines(more.x, y.pred)
X
beta
setwd("~/Desktop/PhDProject/mainp.ecology/BRAMPi/Code")
